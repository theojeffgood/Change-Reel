name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Lint YAML files
      run: |
        echo "Validating YAML syntax..."
        
        # Check if the file exists
        if [ ! -f ".github/workflows/deploy.yml" ]; then
          echo "❌ Workflow file not found"
          exit 1
        fi
        
        # Use Python's yaml module to validate (available in GitHub Actions)
        python3 -c "
        import yaml
        import sys
        
        try:
            with open('.github/workflows/deploy.yml', 'r') as file:
                yaml.safe_load(file)
            print('✅ YAML syntax is valid')
        except yaml.YAMLError as e:
            print(f'❌ YAML syntax error: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'❌ Unexpected error: {e}')
            sys.exit(1)
        "
        
        echo "✅ YAML validation completed successfully"

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Make build script executable
      run: chmod +x scripts/build-image.sh

    - name: Build Docker image using script
      env:
        TOKEN_ENCRYPTION_KEY: ${{ secrets.TOKEN_ENCRYPTION_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      run: |
        echo "Building Docker image using build-image.sh script..."
        ./scripts/build-image.sh wins-column:latest
        echo "✅ Docker image built successfully"

    - name: Save Docker image as tar
      run: |
        echo "Saving Docker image as tar file..."
        docker save wins-column:latest | gzip > wins-column.tar.gz
        ls -la wins-column.tar.gz
        echo "✅ Docker image saved as wins-column.tar.gz"

    - name: Upload Docker image and compose files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "wins-column.tar.gz,docker-compose.yml"
        target: "~/apps/wins-column"

    - name: Load Docker image and restart container on EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/apps/wins-column
          
          echo "Loading Docker image from tar file..."
          gunzip -c wins-column.tar.gz | docker load
          
          echo "Stopping existing containers..."
          docker compose down || true
          
          echo "Starting containers with new image..."
          docker compose up -d
          
          echo "✅ Deployment completed successfully"

