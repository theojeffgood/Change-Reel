#!/usr/bin/env bash
# Build the Wins Column Docker image locally, forwarding all variables in .env
# to the Docker builder as --build-arg so the Next.js compile succeeds.
# The image is built for linux/amd64 to match the EC2 environment.
#
# Usage: ./scripts/build-image.sh [image-tag]
#   image-tag (optional) – Defaults to wins-column:latest
#
# The script:
#   1. Exports every non-comment line in .env to the current shell
#   2. Converts each variable into a --build-arg KEY="${KEY}" pair
#   3. Executes docker build with --platform=linux/amd64 and those build args
#
# Notes
# -----
# • Build-time secrets exist only in the intermediate builder layer and are NOT
#   baked into the final runtime image (see Dockerfile ARG/ENV pattern).
# • If you add new variables to .env you don’t need to touch this script or the
#   Dockerfile—just rerun the script.
# • After the image is built you can copy it to your EC2 host via docker save |
#   ssh ... docker load, or push to a registry of your choice.

set -euo pipefail

IMAGE_TAG="${1:-wins-column:latest}"

# Ensure .env exists
if [[ ! -f .env ]]; then
  echo "ERROR: .env file not found in project root." >&2
  exit 1
fi

# Export variables from .env into current shell, ignoring comments and blanks
set -a  # automatically export all variables that follow
# shellcheck disable=SC1091  # .env is generated by user
source <(grep -v "^#" .env | sed -E '/^\s*$/d')
set +a

# Build argument string with real values (not literal ${VAR})
BUILD_ARGS=""
while IFS= read -r line; do
  [[ -z "$line" || "$line" == \#* ]] && continue  # skip blanks/comments
  key="${line%%=*}"
  value="${!key}"  # indirect expansion to get the exported value
  BUILD_ARGS+=" --build-arg ${key}=${value}"
done < .env

# shellcheck disable=SC2086  # we want word splitting in $BUILD_ARGS
docker build --platform=linux/amd64 $BUILD_ARGS -t "$IMAGE_TAG" .

echo "\n✓ Image built: $IMAGE_TAG" 