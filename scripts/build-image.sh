#!/usr/bin/env bash
# Build the Change Reel Docker image locally, forwarding all variables in .env
# to the Docker builder as --build-arg so the Next.js compile succeeds.
# The image is built for linux/amd64 to match the EC2 environment.
#
# Usage: ./scripts/build-image.sh [image-tag]
#   image-tag (optional) – Defaults to change-reel:latest
#
# The script:
#   1. Exports every non-comment line in .env to the current shell
#   2. Converts each variable into a --build-arg KEY="${KEY}" pair
#   3. Executes docker build with --platform=linux/amd64 and those build args
#
# Notes
# -----
# • Build-time secrets exist only in the intermediate builder layer and are NOT
#   baked into the final runtime image (see Dockerfile ARG/ENV pattern).
# • If you add new variables to .env you don't need to touch this script or the
#   Dockerfile—just rerun the script.
# • After the image is built you can copy it to your EC2 host via docker save |
#   ssh ... docker load, or push to a registry of your choice.

set -euo pipefail

IMAGE_TAG="${1:-change-reel:latest}"

# Check if we're in a CI environment (GitHub Actions)
if [[ -n "${CI:-}" ]]; then
  echo "Running in CI environment, using environment variables..."
  
  # Build argument string using environment variables (GitHub Actions secrets)
  BUILD_ARGS=""
  
  # List of required environment variables
  REQUIRED_VARS=(
    "TOKEN_ENCRYPTION_KEY"
    "OPENAI_API_KEY"
    "NEXT_PUBLIC_SUPABASE_URL"
    "NEXT_PUBLIC_SUPABASE_ANON_KEY"
    "NEXT_PUBLIC_GITHUB_APP_INSTALL_URL"
    "SUPABASE_SERVICE_ROLE_KEY"
    "OAUTH_CLIENT_ID"
    "OAUTH_CLIENT_SECRET"
    "NEXTAUTH_SECRET"
    "NEXTAUTH_URL"
  )
  
  # Check that all required variables are set
  for var in "${REQUIRED_VARS[@]}"; do
    if [[ -z "${!var:-}" ]]; then
      echo "ERROR: Required environment variable $var is not set" >&2
      exit 1
    fi
    # Escape value for safe shell usage
    escaped_value=$(printf '%q' "${!var}")
    BUILD_ARGS+=" --build-arg ${var}=${escaped_value}"
  done
  
  echo "Using environment variables for build args"
else
  # Local development - use .env file
  echo "Running locally, using .env file..."
  
  # Ensure .env exists
  if [[ ! -f .env ]]; then
    echo "ERROR: .env file not found in project root." >&2
    exit 1
  fi

  # Export variables from .env into current shell, ignoring comments and blanks
  set -a  # automatically export all variables that follow
  # shellcheck disable=SC1091  # .env is generated by user
  source <(grep -v "^#" .env | sed -E '/^\s*$/d')
  set +a

  # Build argument string with real values (not literal ${VAR})
  BUILD_ARGS=""
  while IFS= read -r line; do
    [[ -z "$line" || "$line" == \#* ]] && continue  # skip blanks/comments
    key="${line%%=*}"
    value="${line#*=}"
    # Escape value for safe shell usage (handles !, spaces, etc.)
    escaped_value=$(printf '%q' "$value")
    BUILD_ARGS+=" --build-arg ${key}=${escaped_value}"
  done < .env
  
  echo "Using .env file for build args"
fi

# shellcheck disable=SC2086  # we want word splitting in $BUILD_ARGS
docker build --platform=linux/amd64 $BUILD_ARGS -t "$IMAGE_TAG" .

echo "✓ Image built: $IMAGE_TAG" 
