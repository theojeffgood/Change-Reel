name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Make build script executable
      run: chmod +x scripts/build-image.sh

    - name: Build Docker image using script
      env:
        TOKEN_ENCRYPTION_KEY: ${{ secrets.TOKEN_ENCRYPTION_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_GITHUB_APP_INSTALL_URL: ${{ secrets.NEXT_PUBLIC_GITHUB_APP_INSTALL_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      run: |
        echo "Building Docker image using build-image.sh script..."
        ./scripts/build-image.sh change-reel:latest
        echo "✅ Docker image built successfully"

    - name: Save Docker image as tar
      run: |
        echo "Saving Docker image as tar file..."
        docker save change-reel:latest | gzip > change-reel.tar.gz
        ls -la change-reel.tar.gz
        echo "✅ Docker image saved as change-reel.tar.gz"

    - name: Upload Docker image and compose files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "change-reel.tar.gz,docker-compose.prod.yml"
        target: "~/apps/change-reel"
        strip_components: 0
        overwrite: true
        timeout: 60s

    - name: Load Docker image and restart container on EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e  # Exit on any error
          cd ~/apps/change-reel
          
          echo "Loading Docker image from tar file..."
          if ! gunzip -c change-reel.tar.gz | docker load; then
            echo "❌ Failed to load Docker image"
            exit 1
          fi
          
          echo "Stopping existing containers..."
          # Stop any containers managed by docker-compose
          docker-compose -f docker-compose.prod.yml down || true
          
          # Stop and remove any manually created containers that might be using port 3001
          echo "Stopping any manually created containers..."
          docker stop changereel-image 2>/dev/null || true
          docker rm changereel-image 2>/dev/null || true
          
          echo "Starting containers with new image..."
          if ! docker-compose -f docker-compose.prod.yml up -d; then
            echo "❌ Failed to start containers"
            exit 1
          fi
          
          echo "Waiting for container to be healthy..."
          sleep 10
          
          # Check if container is running
          if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "❌ Container is not running"
            docker-compose -f docker-compose.prod.yml logs
            exit 1
          fi
          
          echo "✅ Deployment completed successfully"