# Use the official Node.js image as base - Debian/glibc
FROM node:20-bookworm-slim AS base

# Install dependencies only when needed
FROM base AS deps
# Install all dependencies including devDependencies for build
RUN apt-get update && \
    apt-get install -y --no-install-recommends dumb-init && \
    rm -rf /var/lib/apt/lists/*
WORKDIR /app

# Copy dependency files
COPY package.json package-lock.json* ./

# Install ALL dependencies (including devDependencies) for build process
RUN npm ci \
  && npm rebuild lightningcss --update-binary || true \
  && npm cache clean --force

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Disable telemetry during build
ENV NEXT_TELEMETRY_DISABLED 1

# Build the application (needs devDependencies like @tailwindcss/postcss)
RUN npm run build

# Production dependencies only
FROM base AS prod-deps
WORKDIR /app
COPY package.json package-lock.json* ./
# Install only production dependencies for runtime
RUN npm ci --only=production --omit=dev \
  && npm rebuild lightningcss --update-binary || true \
  && npm cache clean --force

# Production image - minimal and secure
FROM base AS runner
WORKDIR /app

# Production environment variables
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
ENV PORT 3001
ENV HOSTNAME "0.0.0.0"

# Install only essential packages and security updates
RUN apt-get update && \
    apt-get install -y --no-install-recommends dumb-init && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Create non-root user with specific IDs for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy public assets
COPY --from=builder /app/public ./public

# Create and set permissions for .next directory
RUN mkdir .next && chown nextjs:nodejs .next

# Copy built application with correct ownership
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy production-only node_modules
COPY --from=prod-deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Add optimized health check script
COPY --chown=nextjs:nodejs <<EOF /app/healthcheck.js
const http = require('http');

const options = {
  host: 'localhost',
  port: 3001,
  path: '/api/health',
  timeout: 1500,
  headers: { 'User-Agent': 'HealthCheck/1.0' }
};

const request = http.request(options, (res) => {
  if (res.statusCode === 200) {
    console.log('✓ Health check passed');
    process.exit(0);
  } else {
    console.log('✗ Health check failed - Status:', res.statusCode);
    process.exit(1);
  }
});

request.on('error', (err) => {
  console.log('✗ Health check error:', err.message);
  process.exit(1);
});

request.on('timeout', () => {
  console.log('✗ Health check timeout');
  request.destroy();
  process.exit(1);
});

request.setTimeout(1500);
request.end();
EOF

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3001

# Health check configuration - optimized for production
HEALTHCHECK --interval=15s --timeout=5s --start-period=10s --retries=3 \
  CMD node /app/healthcheck.js

# Security labels
LABEL maintainer="Change Reel Team" \
      version="1.0" \
      description="Change Reel Next.js Application - Production" \
      security.non-root="true" \
      security.user="nextjs:1001"

# Start application with proper signal handling
CMD ["dumb-init", "node", "server.js"] 