# Task ID: 21
# Title: Implement Stripe Billing & Checkout Integration
# Status: pending
# Dependencies: 4, 5, 17
# Priority: high
# Description: Integrate Stripe Embedded Checkout for prepaid credits (top-up) billing, including server-side SDK setup, webhook handling, credit balance management in Supabase, and access control based on credit availability.
# Details:
1. **Stripe SDK Setup**
   - Install official Stripe SDK: `npm install stripe @stripe/stripe-js`
   - Configure environment variables in `.env.local`:
     ```
     STRIPE_SECRET_KEY=sk_test_...
     STRIPE_WEBHOOK_SECRET=whsec_...
     NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...
     ```
   - Create Stripe client singleton with dependency injection pattern
   - Set up credit pack Price ID mapping in config file or environment variables

2. **Server Actions & API Routes (Edge-first)**
   - Create `/app/api/stripe/checkout-session/route.ts` for creating Checkout Sessions (Edge runtime)
   - Implement Node.js webhook handler at `/app/api/stripe/webhook/route.ts` (signature verification requires Node runtime)
   - Use server actions where possible for checkout session creation
   - Implement proper error handling and logging

3. **Database Schema Updates**
   - Add billing tables to Supabase:
     ```sql
     CREATE TABLE billing_customers (
       id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
       user_id UUID REFERENCES auth.users(id) UNIQUE,
       stripe_customer_id TEXT UNIQUE,
       created_at TIMESTAMP DEFAULT NOW()
     );
     
     CREATE TABLE credit_balances (
       user_id UUID PRIMARY KEY REFERENCES auth.users(id),
       balance DECIMAL(10,2) NOT NULL DEFAULT 0,
       updated_at TIMESTAMP DEFAULT NOW()
     );
     
     CREATE TABLE credits_ledger (
       id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
       user_id UUID REFERENCES auth.users(id),
       amount DECIMAL(10,2) NOT NULL,
       type TEXT NOT NULL, -- 'credit' or 'debit'
       description TEXT,
       stripe_event_id TEXT,
       created_at TIMESTAMP DEFAULT NOW()
     );
     
     CREATE TABLE pricing_config (
       id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
       model TEXT NOT NULL,
       input_cost_per_1k DECIMAL(10,6),
       output_cost_per_1k DECIMAL(10,6),
       markup_percentage DECIMAL(5,2),
       created_at TIMESTAMP DEFAULT NOW()
     );
     ```
   - Create indexes for efficient lookups
   - Implement RLS policies for user access

4. **Embedded Checkout Implementation**
   - Create `/app/billing/page.tsx` with Stripe Embedded Checkout for credit packs
   - Display available credit packs (1k, 10k, 100k credits) with prices
   - Use `@stripe/stripe-js` for client-side integration
   - Handle success redirect to `/billing/success`
   - Handle cancel redirect back to `/billing`
   - Show current credit balance prominently

5. **Webhook Handler**
   - Implement signature verification using `stripe.webhooks.constructEvent`
   - Handle events:
     - `checkout.session.completed`: Grant credits to user
     - `payment_intent.succeeded`: Confirm credit grant
     - `charge.refunded`: Deduct credits from balance
     - `charge.dispute.created`: Handle disputes by deducting credits
   - Implement idempotency using Stripe event IDs
   - Use atomic database transactions for credit updates

6. **Credit Accounting System**
   - Create `lib/credits.ts` with helper functions:
     ```typescript
     export async function getCreditBalance(userId: string): Promise<number>
     export async function deductCredits(userId: string, amount: number, description: string): Promise<boolean>
     export async function addCredits(userId: string, amount: number, stripeEventId: string): Promise<void>
     export async function hasEnoughCredits(userId: string, requiredAmount: number): Promise<boolean>
     ```
   - Implement optimistic concurrency control for balance updates
   - Create ledger entries for all credit transactions

7. **Usage Metering Integration**
   - Integrate with existing OpenAI flow to calculate token costs
   - Estimate credits needed before API calls based on prompt length
   - Deduct actual credits after receiving OpenAI response
   - Apply markup percentage from pricing_config
   - Block summarization when insufficient credits

8. **Billing Management UI**
   - Create billing page showing:
     - Current credit balance with visual indicator
     - Recent credit transactions from ledger
     - "Top Up" button to purchase more credits
     - Usage history with credit consumption
   - Add low balance warnings throughout the app
   - Implement server components for real-time balance display

9. **Access Control Implementation**
   - Update middleware to check credit balance before allowing summarization
   - Show "Insufficient Credits" message with top-up CTA
   - Allow read-only access when credits are low
   - Implement grace period for negative balances (optional)

10. **Admin & Reconciliation Tools**
    - Create admin utilities for:
      - Manual credit adjustments
      - Reconciling Stripe events with ledger
      - Viewing user credit history
      - Exporting transaction reports
    - Implement audit logging for all credit operations

# Test Strategy:
1. **Unit Tests**
   - Mock Stripe SDK using Jest mocks
   - Test checkout session creation with various credit pack Price IDs
   - Test webhook signature verification logic
   - Test credit accounting functions with concurrent operations
   - Test access control helpers with different credit balances
   - Verify atomic ledger updates

2. **Integration Tests**
   - Use Stripe test mode for real API calls
   - Test full checkout flow with test cards
   - Verify webhook event processing with sample payloads
   - Test credit grant/deduct lifecycle
   - Verify ledger entries match Stripe events
   - Test optimistic concurrency handling

3. **E2E Testing**
   - Set up Stripe CLI for local webhook forwarding:
     ```bash
     stripe listen --forward-to localhost:3000/api/stripe/webhook
     ```
   - Test complete top-up flow from UI to credit grant
   - Verify credit balance updates in real-time
   - Test usage deduction during summarization
   - Test refund handling and credit deduction

4. **Security Testing**
   - Verify webhook signatures prevent tampering
   - Test invalid API keys handling
   - Verify CSRF protection on billing forms
   - Test rate limiting on API endpoints
   - Verify secure storage of customer data
   - Test for race conditions in credit operations

5. **Performance Testing**
   - Measure checkout session creation latency
   - Test webhook processing time
   - Verify database query performance for balance checks
   - Test concurrent credit operations
   - Benchmark ledger query performance

6. **Documentation Verification**
   - Update README with:
     - Required environment variables
     - Stripe dashboard configuration for credit packs
     - Local development setup with Stripe CLI
     - Testing instructions with test cards
     - Credit system architecture overview
   - Document reconciliation procedures

# Subtasks:
## 1. Install Stripe SDKs and Configure Environment Variables [done]
### Dependencies: None
### Description: Install the official Stripe SDK packages and set up environment variables for API keys and webhook secrets
### Details:
Run `npm install stripe @stripe/stripe-js` to install both server and client SDKs. Create or update `.env.local` file with STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET, and NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY. Add these variables to your deployment environment as well.

## 2. Implement Environment Variable Validation [done]
### Dependencies: 21.1
### Description: Create a validation utility to ensure all required Stripe environment variables are present and properly formatted
### Details:
Create `lib/stripe/config.ts` with a validation function that checks for presence of all required environment variables at startup. Throw descriptive errors if any are missing or malformed. Include validation for test vs live key prefixes.

## 3. Create Supabase Billing Tables and Indexes [done]
### Dependencies: None
### Description: Set up database schema for billing customers, credit balances, credits ledger, and pricing configuration
### Details:
Execute SQL migrations to create billing_customers, credit_balances, credits_ledger, and pricing_config tables. Add indexes on user_id, stripe_customer_id, and created_at columns. Implement RLS policies to ensure users can only access their own billing data.

## 4. Create Stripe Client Singleton with Credit Pack Configuration [done]
### Dependencies: 21.2
### Description: Implement a dependency-injected Stripe client singleton with credit pack Price ID mapping
### Details:
Create `lib/stripe/client.ts` with a singleton pattern for the Stripe client. Include credit pack configuration mapping (1k, 10k, 100k credits) to Stripe Price IDs. Use environment variables or a config file for Price ID mapping. Export typed interfaces for credit packs.

## 5. Implement Edge-Compatible Checkout Session API Route [done]
### Dependencies: 21.4
### Description: Create an Edge runtime API route for creating Stripe Checkout Sessions
### Details:
Create `/app/api/stripe/checkout-session/route.ts` using Edge runtime. Implement POST handler to create Checkout Sessions with selected credit pack. Include user authentication, customer creation/retrieval, and proper error handling. Return session URL for client redirect.
<info added on 2025-08-19T18:03:04.902Z>
Use Node.js runtime instead of Edge runtime. Implement standard request body parsing with `await request.json()`. Use standard Next.js authentication patterns without Edge-specific APIs. Ensure compatibility with Node.js runtime environment for all Stripe API calls and authentication checks.
</info added on 2025-08-19T18:03:04.902Z>

## 6. Build Billing Page with Embedded Checkout [done]
### Dependencies: 21.3, 21.5
### Description: Create the billing page UI with Stripe Embedded Checkout integration and credit balance display
### Details:
Create `/app/billing/page.tsx` as a server component that fetches user's current credit balance. Display credit packs with pricing. Implement client component for Embedded Checkout using @stripe/stripe-js. Handle success/cancel redirects. Show prominent current balance indicator.

## 7. Implement Node.js Webhook Handler with Signature Verification [done]
### Dependencies: 21.4
### Description: Create a Node runtime webhook handler for processing Stripe events with signature verification
### Details:
Create `/app/api/stripe/webhook/route.ts` using Node runtime for signature verification. Implement stripe.webhooks.constructEvent for secure event validation. Add request body parsing for raw webhook payload. Include comprehensive error logging.

## 8. Handle Stripe Events with Atomic Credit Updates [done]
### Dependencies: 21.3, 21.7
### Description: Implement event handlers for checkout completion, refunds, and disputes with atomic database transactions
### Details:
In webhook handler, implement logic for checkout.session.completed (grant credits), payment_intent.succeeded (confirm), charge.refunded (deduct), and charge.dispute.created (deduct). Use database transactions for atomic updates. Store Stripe event IDs for idempotency. Update both credit_balances and credits_ledger.

## 9. Create Credit Accounting Library with Concurrency Control [done]
### Dependencies: 21.3
### Description: Build a credit management library with functions for balance operations and optimistic concurrency control
### Details:
Create `lib/credits.ts` with getCreditBalance, deductCredits, addCredits, and hasEnoughCredits functions. Implement optimistic locking using version numbers or timestamps. Create ledger entries for all transactions. Include detailed error handling for insufficient funds.

## 10. Integrate Credit Deduction into OpenAI Usage Flow [done]
### Dependencies: 21.9
### Description: Modify existing OpenAI integration to check credits before API calls and deduct based on actual usage
### Details:
Update OpenAI service to estimate required credits based on prompt length before API calls. Check credit balance and block if insufficient. After receiving response, calculate actual token usage with markup from pricing_config. Deduct credits and create ledger entry with usage details.

## 11. Build Credit Balance UI Components and Top-up CTAs [done]
### Dependencies: 21.6, 21.9
### Description: Create UI components for displaying credit balance, usage history, and top-up calls-to-action throughout the app
### Details:
Create reusable components for credit balance display with visual indicators (progress bars, color coding). Add recent transactions list from credits_ledger. Implement low balance warnings and top-up CTAs. Use server components for real-time balance updates. Add to navigation and key user flows.

## 12. Create Tests, Documentation, and Basic Admin Tools [pending]
### Dependencies: 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9, 21.10, 21.11
### Description: Implement comprehensive tests, Stripe CLI setup documentation, and basic admin utilities for credit management
### Details:
Write integration tests using Stripe test mode. Document Stripe CLI setup for local webhook testing. Create README with billing system overview and testing instructions. Build basic admin API endpoints for manual credit adjustments and transaction queries with proper authorization.

## 13. Define real credit packs, prices, and Stripe Price IDs [pending]
### Dependencies: None
### Description: In Stripe Dashboard, create Products and one-time Prices for credit packs (e.g., 1k, 10k, 100k credits) in USD. Record Price IDs and final conversion (e.g., $10 = 10,000 credits, 20% markup). Add them to environment/config mapping. Update success/cancel URLs if needed.
### Details:


## 14. Populate Credits Remaining metric with real data [pending]
### Dependencies: None
### Description: Fetch and display the authenticated user’s real credit balance in the Admin dashboard MetricsBar fourth card.
### Details:
Implement a client-safe fetch for the current user’s credit balance and show it in the fourth metric card on `src/app/admin/components/MetricsBar.tsx`.
- Source of truth: use `/api/billing/balance` endpoint (or BillingService via a minimal API) to return `{ balance, recentTransactions }` for the signed-in user.
- Replace the placeholder value currently reusing `contributors` with the real balance; handle loading and error states gracefully.
- Ensure this works only for authenticated users; for unauthenticated, show a clear CTA linking to `/billing` with brief explanatory text.
- Add simple unit test(s) for the data formatting and error handling.
- Avoid introducing new dependencies.

## 15. Reconcile credits post-summary with actual token usage [pending]
### Dependencies: None
### Description: After OpenAI returns, compute actual USD from tokens used (input/output) using pricing_config, convert to credits with markup, and reconcile against the pre-deducted estimate (refund or additionally charge). Ensure atomic updates, idempotency (keyed by job/commit), and ledger entries for adjustments.
### Details:


## 16. Use real diffs in queued summary jobs (remove placeholders) [pending]
### Dependencies: None
### Description: Update /api/commits/[id]/queue-summary to enqueue a fetch_diff job (or fetch diffs directly) and make generate_summary depend on it. Ensure generate_summary reads real diff_content from dependency context, removing placeholder strings.
### Details:


## 17. Replace BillingClient x-user-id header with authenticated user id [pending]
### Dependencies: None
### Description: In src/app/billing/ui/BillingClient.tsx, remove the hardcoded x-user-id. Use NextAuth session (or a small server endpoint) to resolve the authenticated user id, and send that with API calls. Remove the TODO.
### Details:


## 18. Align pricing model and parameters with summarization model [pending]
### Dependencies: None
### Description: Ensure billing charges the same model as used by summarization. Move model id, output token reserve, and markup defaults to config (pricing_config or env). Update BillingService.chargeSummaryEstimation to read from config and keep parity.
### Details:


